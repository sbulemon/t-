async function loadData(){
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  return await window.dataSync.getData();
}

function getCategoryLabel(cat){
  const map = {
    'media':'–ú–µ–¥–∏–π–∫–∏ üì∫',
    'fame':'–§–µ–π–º üåü',
    'mid':'–°—Ä–µ–¥. —Ñ–µ–π–º üìà',
    'small':'–ú–∞–ª. —Ñ–µ–π–º üìâ',
    'bomg':'–ë–æ–º–∂–∏/–°–∫–∞–º üí∏',
    'product':'–¢–æ–≤–∞—Ä—ã üõí',
    'admin':'–ê–¥–º–∏–Ω—ã üëë',
    'coder':'–ö–æ–¥–µ—Ä—ã üíª',
    'other':'–ü—Ä–æ—á–µ–µ ‚ùì'
  };
  return map[cat] || cat;
}

function createCard(person){
  const card = document.createElement('div');
  card.className = 'person-card';
  card.innerHTML = `
    <div class="card-header">
      <img class="card-avatar" src="${person.img||'https://via.placeholder.com/300x200?text=No+Image'}" alt="avatar">
      <div class="card-badge">${person.badgeText || ''}</div>
    </div>
    <div class="card-content">
      <h3 class="card-name">${person.name}</h3>
      <div class="card-category">${getCategoryLabel(person.category)}</div>
      <p class="card-bio">${person.info.slice(0,180)}${person.info.length>180?'...':''}</p>
    </div>
    <div class="card-footer">
      <a href="#" class="card-link" data-id="${person.id}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí</a>
    </div>
  `;
  return card;
}

function renderGrid(persons){
  const grid = document.getElementById('famelistGrid');
  grid.innerHTML='';
  persons.forEach(p=>grid.appendChild(createCard(p)));
  // attach handlers
  document.querySelectorAll('.card-link').forEach(a=>{
    a.addEventListener('click', function(e){
      e.preventDefault();
      const id = Number(this.dataset.id);
      const person = window.ALL_PERSONS.find(x=>x.id===id);
      showDetail(person);
    });
  });
}

let currentPerson = null;

function showDetail(person){
  if(!person) return;
  currentPerson = person;
  document.getElementById('detailImg').src = person.img || 'https://via.placeholder.com/400x300?text=No+Image';
  document.getElementById('detailName').textContent = person.name;
  const badge = document.getElementById('detailBadge');
  badge.textContent = person.badgeText || '';
  document.getElementById('detailInfo').textContent = person.info || '';
  const contacts = document.getElementById('detailContacts');
  contacts.innerHTML = '';
  if(person.channel){
    const a = document.createElement('a'); a.href = person.channel; a.target='_blank'; a.textContent='–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª'; a.className = 'social-btn channel-btn'; contacts.appendChild(a);
  }
  if(person.dm){
    const b = document.createElement('a'); b.href = person.dm; b.target='_blank'; b.textContent='–ù–∞–ø–∏—Å–∞—Ç—å –≤ –õ–°'; b.className = 'social-btn dm-btn'; contacts.appendChild(b);
  }
  const sellerEl = document.getElementById('detailSeller');
  sellerEl.innerHTML='';
  if(person.seller){
    sellerEl.innerHTML = '<strong>–ü—Ä–æ–¥–∞–≤–µ—Ü: </strong>'+person.seller;
  }
  const pricesEl = document.getElementById('detailPrices');
  pricesEl.innerHTML='';
  if(person.prices){
    let html=' <strong>–¶–µ–Ω—ã:</strong><ul>';
    for(const k in person.prices){
      html += `<li>${k.toUpperCase()}: ${person.prices[k]}</li>`;
    }
    html += '</ul>';
    pricesEl.innerHTML = html;
  }
  document.getElementById('detailModal').classList.add('show');
  document.getElementById('detailModal').setAttribute('aria-hidden','false');
}

document.addEventListener('DOMContentLoaded', async ()=>{
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await window.dataSync.init();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const data = await loadData();
    window.ALL_PERSONS = data;
    renderGrid(data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ.', 'warning');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    try {
      const demoData = window.dataSync.createDemoData();
      window.ALL_PERSONS = demoData;
      renderGrid(demoData);
    } catch (demoError) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö:', demoError);
      showNotification('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
  }

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  window.dataSync.addListener((event, data) => {
    switch(event) {
      case 'dataLoaded':
      case 'dataSynced':
        window.ALL_PERSONS = data;
        renderGrid(data);
        updateStats();
        break;
      case 'dataError':
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', data);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
        break;
      case 'syncError':
        console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', data);
        showNotification('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', 'warning');
        break;
    }
  });

  // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  document.getElementById('searchBox').addEventListener('input', ()=>{
    performSearch();
  });

  // Category page buttons
  document.querySelectorAll('.page-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      document.querySelectorAll('.page-btn').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      performSearch();
    });
  });

  // FAQ button
  document.getElementById('faqButton').addEventListener('click', () => {
    document.getElementById('faqModal').classList.add('show');
    document.getElementById('faqModal').setAttribute('aria-hidden', 'false');
  });

  // Close FAQ
  document.getElementById('closeFaq').addEventListener('click', () => {
    document.getElementById('faqModal').classList.remove('show');
    document.getElementById('faqModal').setAttribute('aria-hidden', 'true');
  });

  document.getElementById('faqModal').addEventListener('click', (e) => {
    if (e.target === document.getElementById('faqModal')) {
      document.getElementById('faqModal').classList.remove('show');
      document.getElementById('faqModal').setAttribute('aria-hidden', 'true');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  document.getElementById('closeModal').addEventListener('click', ()=>{
    document.getElementById('detailModal').classList.remove('show');
    document.getElementById('detailModal').setAttribute('aria-hidden','true');
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ñ–æ–Ω—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  document.getElementById('detailModal').addEventListener('click', (e) => {
    if (e.target === document.getElementById('detailModal')) {
      document.getElementById('detailModal').classList.remove('show');
      document.getElementById('detailModal').setAttribute('aria-hidden','true');
    }
  });

  // Share button
  document.getElementById('shareProfile').addEventListener('click', () => {
    if (navigator.share && currentPerson) {
      navigator.share({
        title: currentPerson.name,
        text: currentPerson.info.slice(0, 100) + '...',
        url: window.location.href
      }).catch(console.error);
    } else {
      // Fallback: copy to clipboard
      navigator.clipboard.writeText(window.location.href).then(() => {
        showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
      });
    }
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  updateStats();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
  checkLocalMode();
});

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
function performSearch() {
  const query = document.getElementById('searchBox').value;
  const category = document.querySelector('.page-btn.active')?.dataset.category || 'all';
  
  const results = window.dataSync.searchData(query, category);
  renderGrid(results);
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function updateStats() {
  const stats = window.dataSync.getStats();
  if (!stats) return;
  
  // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  let statsEl = document.getElementById('stats');
  if (!statsEl) {
    statsEl = document.createElement('div');
    statsEl.id = 'stats';
    statsEl.className = 'stats';
    document.querySelector('.famelist-section').appendChild(statsEl);
  }
  
  const lastUpdate = stats.lastUpdate ? new Date(stats.lastUpdate).toLocaleString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  statsEl.innerHTML = `
    <div class="stats-item">–í—Å–µ–≥–æ: ${stats.total}</div>
    <div class="stats-item">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${lastUpdate}</div>
    <div class="stats-item">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${Object.keys(stats.categories).length}</div>
  `;
}

/**
 * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `notification notification-${type}`;
  notification.textContent = message;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    notification.classList.add('show');
  }, 100);
  
  setTimeout(() => {
    notification.classList.remove('show');
    setTimeout(() => {
      document.body.removeChild(notification);
    }, 300);
  }, 3000);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
 */
function checkLocalMode() {
  if (window.location.protocol === 'file:') {
    const localModeNotification = document.createElement('div');
    localModeNotification.className = 'local-mode-notification';
    localModeNotification.innerHTML = `
      <div class="local-mode-content">
        <strong>üîß –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º</strong>
        <p>–ü—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ. –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTP —Å–µ—Ä–≤–µ—Ä.</p>
        <button onclick="this.parentElement.parentElement.remove()" class="close-local-mode">‚úï</button>
      </div>
    `;
    
    document.body.appendChild(localModeNotification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (localModeNotification.parentNode) {
        localModeNotification.remove();
      }
    }, 10000);
  }
}
